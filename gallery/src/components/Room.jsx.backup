import React, { useRef, useEffect, useState, useMemo, useCallback, Suspense } from 'react';
import { Canvas, useThree, useFrame } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';
import * as THREE from 'three';
import { EffectComposer, Outline } from '@react-three/postprocessing';
import './styles.css';
import { useTexture } from '@react-three/drei';
import ContentDisplay from './ContentDisplay.jsx';
import gsap from 'gsap';

// Room dimensions
const roomHeight = 150;
const roomWidth = 166.68; // 150 * 10 / 9
const roomDepth = 166.68;
const viewerHeight = 45;

// Lighting configuration
const ambientLightIntensity = 1.5;
const ambientLightColor = "#fff0e6";
const centralLightIntensity = 1.8;
const centralLightColor = "#ffe4cc";
const wallLightIntensity = 1.2;
const wallLightColor = "#fff0e6";

const minDistance = 0.5;
const maxDistance = Math.max(roomWidth, roomHeight, roomDepth) / 2; // 큐브 밖으로 나가지 않도록 최대 거리 설정

// 초기 카메라 상태를 상수로 정의
const INITIAL_CAMERA_POSITION = new THREE.Vector3(0, viewerHeight, roomDepth / 2 - 1);
const INITIAL_CAMERA_LOOKAT = new THREE.Vector3(0, 0, 0);
const INITIAL_CAMERA_FOV = 75;

// 텍스처 로더를 컴포넌트 외부로 이동
const textureLoader = new THREE.TextureLoader();
const textureSettings = {
  minFilter: THREE.LinearFilter,
  magFilter: THREE.LinearFilter,
  format: THREE.RGBAFormat,
  type: THREE.UnsignedByteType,
  generateMipmaps: false
};

// 텍스처 로딩 함수
const loadTexture = (path, uvTransform) => {
  return textureLoader.load(path, texture => {
    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(1, 1);
    Object.assign(texture, textureSettings);
    if (uvTransform) {
      texture.repeat.set(...uvTransform.repeat);
      texture.offset.set(...uvTransform.offset);
    }
  });
};

// 3D 중심 좌표 변환 함수
function bboxCenterTo3D({min_x, min_y, width, height}) {
  const center_x = min_x + width / 2;
  const center_y = min_y + height / 2;
  const left = center_x / 2000;
  const top = center_y / 1800;
  const posX = (left - 0.5) * roomWidth;
  const posY = (0.5 - top) * roomHeight;
  return [posX, posY];
}

// 수정된: 천장/바닥 버튼 위치를 위한 좌표
const floorCeilingButtonPositions = {
  floor: {
    btn_f_rug: [-20, 0.1, 40],
    btn_f_phone: [50, 0.1, -50],
  },
  ceiling: {
    btn_c_lamp: [0, -0.1, 0],
    btn_c_heart: [60, -0.1, 60],
  },
};

// 버튼 데이터 정의
const buttonImageData = {
  // 천장 버튼들
  btn_c_lamp: {
    type: 'lamp',
    wall: 'ceiling',
    src: '/images/buttons/wall_ceiling_btn/btn_c_lamp.png',
    hoverSrc: '/images/buttons/wall_ceiling_btn/btn_c_lamp.png', // hover 이미지가 없으므로 같은 이미지 사용
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_c_heart: {
    type: 'heart',
    wall: 'ceiling',
    src: '/images/buttons/wall_ceiling_btn/btn_c_heart.png',
    hoverSrc: '/images/buttons/wall_ceiling_btn/btn_c_heart_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  
  // 바닥 버튼들
  btn_f_rug: {
    type: 'rug',
    wall: 'floor',
    src: '/images/buttons/wall_floor_btn/btn_f_rug.png',
    hoverSrc: '/images/buttons/wall_floor_btn/btn_f_rug_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_f_phone: {
    type: 'phone',
    wall: 'floor',
    src: '/images/buttons/wall_floor_btn/btn_f_phone.png',
    hoverSrc: '/images/buttons/wall_floor_btn/btn_f_phone_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  
  // 벽 버튼들 (기존 데이터 유지)
  btn_b_bus: {
    type: 'bus',
    wall: 'left',
    src: '/images/buttons/wall_bus-stop_btn/btn_b_bus.png',
    hoverSrc: '/images/buttons/wall_bus-stop_btn/btn_b_bus_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_b_busstop: {
    type: 'busstop',
    wall: 'left',
    src: '/images/buttons/wall_bus-stop_btn/btn_b_busstop.png',
    hoverSrc: '/images/buttons/wall_bus-stop_btn/btn_b_busstop_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_b_home: {
    type: 'home',
    wall: 'left',
    src: '/images/buttons/wall_bus-stop_btn/btn_b_home.png',
    hoverSrc: '/images/buttons/wall_bus-stop_btn/btn_b_home_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  
  btn_h_dog: {
    type: 'dog',
    wall: 'back',
    src: '/images/buttons/wall_home_btn/btn_h_dog.png',
    hoverSrc: '/images/buttons/wall_home_btn/btn_h_dog_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_h_home: {
    type: 'home',
    wall: 'back',
    src: '/images/buttons/wall_home_btn/btn_h_home.png',
    hoverSrc: '/images/buttons/wall_home_btn/btn_h_home_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_h_ribbon: {
    type: 'ribbon',
    wall: 'back',
    src: '/images/buttons/wall_home_btn/btn_h_ribbon.png',
    hoverSrc: '/images/buttons/wall_home_btn/btn_h_ribbon_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_h_star: {
    type: 'star',
    wall: 'back',
    src: '/images/buttons/wall_home_btn/btn_h_star.png',
    hoverSrc: '/images/buttons/wall_home_btn/btn_h_star_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  
  btn_p_go: {
    type: 'go',
    wall: 'front',
    src: '/images/buttons/wall_photo_btn/btn_p_go.png',
    hoverSrc: '/images/buttons/wall_photo_btn/btn_p_go_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_p_note: {
    type: 'note',
    wall: 'front',
    src: '/images/buttons/wall_photo_btn/btn_p_note.png',
    hoverSrc: '/images/buttons/wall_photo_btn/btn_p_note_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_p_pavilion: {
    type: 'pavilion',
    wall: 'front',
    src: '/images/buttons/wall_photo_btn/btn_p_pavilion.png',
    hoverSrc: '/images/buttons/wall_photo_btn/btn_p_pavilion_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_p_tree: {
    type: 'tree',
    wall: 'front',
    src: '/images/buttons/wall_photo_btn/btn_p_tree.png',
    hoverSrc: '/images/buttons/wall_photo_btn/btn_p_tree_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  
  btn_w_bridge: {
    type: 'bridge',
    wall: 'right',
    src: '/images/buttons/wall_walk_btn/btn_w_bridge.png',
    hoverSrc: '/images/buttons/wall_walk_btn/btn_w_bridge_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_w_sign: {
    type: 'sign',
    wall: 'right',
    src: '/images/buttons/wall_walk_btn/btn_w_sign.png',
    hoverSrc: '/images/buttons/wall_walk_btn/btn_w_sign_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_w_sun: {
    type: 'sun',
    wall: 'right',
    src: '/images/buttons/wall_walk_btn/btn_w_sun.png',
    hoverSrc: '/images/buttons/wall_walk_btn/btn_w_sun_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  },
  btn_w_walk: {
    type: 'walk',
    wall: 'right',
    src: '/images/buttons/wall_walk_btn/btn_w_walk.png',
    hoverSrc: '/images/buttons/wall_walk_btn/btn_w_walk_hover.png',
    bbox: { min_x: 0, min_y: 0, width: 100, height: 100 }
  }
};

const Button = React.memo(function Button({
  type,
  position,
  src,
  wallType,
  hoveredObject,
  setHoveredObject,
  buttonKey,
  hoverSrc,
  controlsRef,
  setSelectedButton,
  animateCamera,
}) {
  const [isHovered, setIsHovered] = useState(false);
  const [currentTexture, setCurrentTexture] = useState(null);

  const texture = useTexture(src);
  const hoverTexture = useTexture(hoverSrc);

  useEffect(() => {
    setCurrentTexture(isHovered ? hoverTexture : texture);
  }, [isHovered, texture, hoverTexture]);
  
  const meshRef = useRef();

  let planeWidth, planeHeight;
  const aspect = texture.image ? texture.image.width / texture.image.height : 1;
  if (wallType === 'floor' || wallType === 'ceiling') {
      planeWidth = 30;
      planeHeight = 30;
  } else {
      planeWidth = 20;
      planeHeight = 20 / aspect;
  }

  const onPointerOver = (e) => {
    e.stopPropagation();
    setIsHovered(true);
    setHoveredObject(buttonKey);
    document.body.style.cursor = 'pointer';
  };

  const onPointerOut = (e) => {
    e.stopPropagation();
    setIsHovered(false);
    if (hoveredObject === buttonKey) {
      setHoveredObject(null);
    }
    document.body.style.cursor = 'default';
  };

  const handleClick = (e) => {
    e.stopPropagation();
    if (e.button !== 0) return;
  
    const target = getZoomTargetForButton(position, wallType);
    animateCamera(target.position, target.lookAt);
    
    setSelectedButton({ type, src });
  };

  return (
    <mesh
      ref={meshRef}
      position={position}
      onPointerOver={onPointerOver}
      onPointerOut={onPointerOut}
      onClick={handleClick}
    >
      <planeGeometry args={[planeWidth, planeHeight]} />
      <meshStandardMaterial
        map={currentTexture}
        transparent={true}
        alphaTest={0.5}
        side={THREE.DoubleSide}
        polygonOffset={true}
        polygonOffsetFactor={-4}
      />
    </mesh>
  );
});

const getZoomTargetForButton = (position, wallType) => {
  const zoomDistance = 50;
  let cameraPosition = new THREE.Vector3().fromArray(position);
  let lookAt = new THREE.Vector3().fromArray(position);

  switch(wallType) {
    case 'front':
      cameraPosition.z += zoomDistance;
      break;
    case 'back':
      cameraPosition.z -= zoomDistance;
      break;
    case 'left':
      cameraPosition.x += zoomDistance;
      break;
    case 'right':
      cameraPosition.x -= zoomDistance;
      break;
    case 'ceiling':
      cameraPosition.y += zoomDistance;
      lookAt.y = roomHeight / 2;
      break;
    case 'floor':
      cameraPosition.y -= zoomDistance;
      lookAt.y = -roomHeight / 2;
      break;
    default:
      break;
  }

  return { position: cameraPosition, lookAt };
};

const Room = ({ 
  isHovered, 
  setIsHovered, 
  buttonRef, 
  setHoveredObject, 
  hoveredObject, 
  setSelectedButton,
  animateCamera
}) => {
  const { camera, scene, gl } = useThree();
  const controlsRef = useRef();

  const getWallPosition = (type) => {
    switch(type) {
      case 'front': return [0, 0, -roomDepth / 2];
      case 'back': return [0, 0, roomDepth / 2];
      case 'left': return [-roomWidth / 2, 0, 0];
      case 'right': return [roomWidth / 2, 0, 0];
      case 'ceiling': return [0, roomHeight / 2, 0];
      case 'floor': return [0, -roomHeight / 2, 0];
      default: return [0, 0, 0];
    }
  };

  const getWallRotation = (type) => {
    switch(type) {
      case 'front': return [0, 0, 0];
      case 'back': return [0, Math.PI, 0];
      case 'left': return [0, Math.PI / 2, 0];
      case 'right': return [0, -Math.PI / 2, 0];
      case 'ceiling': return [Math.PI / 2, 0, 0];
      case 'floor': return [-Math.PI / 2, 0, 0];
      default: return [0, 0, 0];
    }
  };

  const buttonsByWall = useMemo(() => {
    if (!buttonImageData) return {};
    return Object.keys(buttonImageData).reduce((acc, key) => {
      const wall = buttonImageData[key].wall;
      if (!acc[wall]) acc[wall] = [];
      acc[wall].push(key);
      return acc;
    }, {});
  }, [buttonImageData]);
  
  const walls = useMemo(() => {
    const wallData = [
      { type: 'front', texturePath: '/images/walls/wall_photo.png' },
      { type: 'back', texturePath: '/images/walls/wall_home.png' },
      { type: 'left', texturePath: '/images/walls/wall_bus-stop.png' },
      { type: 'right', texturePath: '/images/walls/wall_walk.png' },
      { type: 'ceiling', texturePath: '/images/walls/wall_ceiling.png' },
      { type: 'floor', texturePath: '/images/walls/floor.png' }
    ];

    return wallData.map(wallDef => {
      const texture = loadTexture(wallDef.texturePath);
      const geometry = new THREE.PlaneGeometry(
        (wallDef.type === 'ceiling' || wallDef.type === 'floor') ? roomWidth : roomWidth,
        (wallDef.type === 'ceiling' || wallDef.type === 'floor') ? roomDepth : roomHeight
      );
      
      const material = new THREE.MeshStandardMaterial({ 
        map: texture, 
        side: THREE.FrontSide 
      });

      const mesh = new THREE.Mesh(geometry, material);
      mesh.position.set(...getWallPosition(wallDef.type));
      mesh.rotation.set(...getWallRotation(wallDef.type));
      
      return {
        ...wallDef,
        mesh,
        buttons: buttonsByWall[wallDef.type] || []
      };
    });
  }, [buttonsByWall]);

  return (
    <>
      <ambientLight intensity={ambientLightIntensity} color={ambientLightColor} />
      <pointLight
        position={[0, 0, 0]}
        intensity={centralLightIntensity}
        color={centralLightColor}
        distance={Math.max(roomWidth, roomHeight, roomDepth) * 1.5}
      />
      
      {walls.map(wall => (
        <primitive key={wall.type} object={wall.mesh} />
      ))}
      
      {walls.map((wall) => (
        <group key={`${wall.type}-buttons`} rotation={wall.mesh.rotation} position={wall.mesh.position}>
          {wall.buttons.map((buttonKey) => {
            const buttonData = buttonImageData[buttonKey];
            if (!buttonData) return null;

            let buttonPosition;
            if (wall.type === 'floor' || wall.type === 'ceiling') {
              buttonPosition = floorCeilingButtonPositions[wall.type]?.[buttonKey];
            } else {
              const [x, y] = bboxCenterTo3D(buttonData.bbox);
              buttonPosition = [x, y, 0.1];
            }
            
            if (!buttonPosition) return null;

            return (
              <Button
                key={buttonKey}
                type={buttonData.type}
                position={buttonPosition}
                src={buttonData.src}
                hoverSrc={buttonData.hoverSrc}
                wallType={wall.type}
                buttonKey={buttonKey}
                hoveredObject={hoveredObject}
                setHoveredObject={setHoveredObject}
                setSelectedButton={setSelectedButton}
                animateCamera={animateCamera}
              />
            );
          })}
        </group>
      ))}
    </>
  );
};


export default function RoomScene() {
  const [hoveredObject, setHoveredObject] = useState(null);
  const [selectedButton, setSelectedButton] = useState(null);
  const cameraRef = useRef();
  const controlsRef = useRef();

  const animateCamera = useCallback((targetPosition, targetLookAt) => {
    if (controlsRef.current && cameraRef.current) {
      const controls = controlsRef.current;
      const camera = cameraRef.current;

      gsap.to(camera.position, {
        duration: 1.5,
        x: targetPosition.x,
        y: targetPosition.y,
        z: targetPosition.z,
        ease: "power3.inOut"
      });

      gsap.to(controls.target, {
        duration: 1.5,
        x: targetLookAt.x,
        y: targetLookAt.y,
        z: targetLookAt.z,
        ease: "power3.inOut",
        onUpdate: () => controls.update()
      });
    }
  }, []);
  
  const handleCloseContent = () => {
    setSelectedButton(null);
    // 원래 카메라 위치로 복귀
    animateCamera(INITIAL_CAMERA_POSITION, INITIAL_CAMERA_LOOKAT);
  };

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <Canvas
        camera={{
          position: INITIAL_CAMERA_POSITION,
          fov: INITIAL_CAMERA_FOV,
          near: 0.1,
          far: 1000
        }}
        onCreated={({ camera }) => {
          cameraRef.current = camera;
          camera.lookAt(INITIAL_CAMERA_LOOKAT);
        }}
      >
        <Suspense fallback={null}>
          <Room 
            hoveredObject={hoveredObject} 
            setHoveredObject={setHoveredObject} 
            setSelectedButton={setSelectedButton}
            animateCamera={animateCamera}
          />
        </Suspense>
        
        <OrbitControls
          ref={controlsRef}
          enablePan={false}
          minDistance={minDistance}
          maxDistance={maxDistance}
          minPolarAngle={Math.PI / 4}
          maxPolarAngle={3 * Math.PI / 4}
          rotateSpeed={-0.3}
          target={INITIAL_CAMERA_LOOKAT}
        />

        <EffectComposer multisampling={0} autoClear={false}>
          {hoveredObject &&
            <Outline
              selection={hoveredObject ? (scene) => scene.children.filter(child => child.userData.buttonKey === hoveredObject) : []}
              visibleEdgeColor="white"
              hiddenEdgeColor="white"
              edgeStrength={10}
              blur={true}
            />
          }
        </EffectComposer>
      </Canvas>
      {selectedButton && (
        <ContentDisplay
          type={selectedButton.type}
          src={selectedButton.src}
          onClose={handleCloseContent}
        />
      )}
    </div>
  );
}